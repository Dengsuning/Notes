/*

给出一个无重叠的 ，按照区间起始端点排序的区间列表。

在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。
示例 2:

输入: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
输出: [[1,2],[3,10],[12,16]]
解释: 这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。
 */


var insert = function(intervals, newInterval) {
    var arr = []
    for (var i = 0; i < newInterval[1] - newInterval[0] +1; i++) {
        arr.push(newInterval[0]+i)
    }

    var result = []
    intervals.reduce((prev,curr,index,arr)=>{
        result.push([prev[1],curr[0]])
        return curr
    })

    for (var i = 0; i < result.length; i++) {

        if(arr.includes(result[i][0]) && arr.includes(result[i][1]) ){
            result.splice(i--,1)
            continue
        }
        if(arr.includes(result[i][0])){
            result[i][0]=arr[arr.length-1]
        }
        else if(arr.includes(result[i][1])){
            result[i][1]=arr[0]
        }
    };
    var temp = []
    result.forEach((item,index)=>{
        temp.push(item[0],item[1])
    })

    if (newInterval[0][0]<intervals[0][0]) {r.unshift(newInterval[0][0])}
    else{temp.unshift(intervals[0][0])}

    if (newInterval[0][1]>intervals[intervals.length-1][1]) {temp.push(newInterval[0][1])}
    else{temp.push(intervals[intervals.length-1][1])}

    var answer = []
    for (var i = 0; i < Math.ceil(temp.length/2); i++) {
        answer.push([temp[i*2],temp[i*2+1]])
    };
    return answer
};


console.log(insert([[1,3],[6,9]],[2,5]));


/*
首先找出intervas区间不包含的区间,然后判断这些区间是否在newInterval中，在的话，去掉，最后留下的区间两两数字之间就是左后合并的答案
*/

