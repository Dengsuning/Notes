安装 Numpy 模块
cmd >>> pip3 install Numpy
from numpy import *


数据类型对象 (dtype)
数据类型对象描述了对应于数组的固定内存块的解释

dtype可由一下语法构造：
numpy.dtype(object, align, copy)
    每个内建类型都有一个唯一定义它的字符代码：
参数为：
Object：被转换为数据类型的对象。
Align：如果为true，则向字段添加间隔，使其类似 C 的结构体。
Copy? 生成dtype对象的新副本，如果为flase，结果是内建数据类型对象的引用。

dtype 对应每个**矩阵项**的数据类型表示
实例
    # 首先创建结构化数据类型。  
    import numpy as np 
    dt = np.dtype([('age',np.int8)])  
    print dt
    
输出如下：
    [('age', 'i1')]

# 文件名称可用于访问 age 列的内容  
import numpy as np 
dt = np.dtype([('age',np.int8)]) 
a = np.array([(10,),(20,),(30,)], dtype = dt)  
print a['age']

输出如下：
[10 20 30]

import numpy as np 
student = np.dtype([('name','S20'),  ('age',  'i1'),  ('marks',  'f4')])  
print student

输出如下：
[('name', 'S20'), ('age', 'i1'), ('marks', '<f4')])

int8，int16，int32，int64 可替换为等价的字符串 'i1'，'i2'，'i4'，以及其他。 
**每个内建类型都有一个唯一定义它的字符代码：**
'b'：布尔值
'i'：符号整数
'u'：无符号整数
'f'：浮点
'c'：复数浮点
'm'：时间间隔
'M'：日期时间
'O'：Python 对象
'S', 'a'：字节串
'U'：Unicode
'V'：原始数据(void)


#NUmpy ——Ndarray对象
描述——
    N维数组
    ndarray中的每个元素在内存中使用相同大小的块
    数组项类型相同
    可基于索引访问——最小索引为0
##数组属性

arr = np.array([[1,2,3],[1,2,3]])

**行列数**
    arr.shape //(2,3) 

**元素总数**
    arr.size

**重置行列数**
    arr.shape = (3,2)
    b = arr.reshapse(3,2)
    c = np.reshape(b,(2,3))

**内存字节数**
    arr = np.array([1,2,3])
    print(a.nbytes) #12

**数组维数**
    arr.ndim //2

**数组元素字节长度**
    x = np.array([1,2,3,4,5], dtype = np.int8)  
    print x.itemsize // 4



数组可进行切片处理，类似于列表
[start:end:step]
一维：

    import numpy as np
    a = np.arange(9)
    print(a)  #[0 1 2 3 4 5 6 7 8]
    print(a[0:]) #[0 1 2 3 4 5 6 7 8]
    print(a[:2])  #[0 1]
    print(a[0::2])  #[0 2 4 6 8]
    print(a[0:-1])  #[0 1 2 3 4 5 6 7]

二维：
[1,1] 不输入冒号代表该位置不进行切片
...代表所有行或者列
[...,1]#每一行的第二列
[...,1:]#第二列向后切片所有元素

    a = np.array([[0,1,2],
                  [4,5,6],
                  [7,8,9]])
    #a[行:,列：] 二维在平面上通过行和列进行切片
    print(a[1:,1:])
    print("______________")
    print(a[2:,0:])

    输出：
    [[5 6]
     [8 9]]
    ——————————
    [[7 8 9]]

ravel展平数组

    b = a.ravel()
    print(b) #[0 1 2 4 5 6 7 8 9 7 8 9]

transpose转置矩阵(行变列，列变行)

    a = np.array([[0,1,2],
                  [4,5,6],
                  [7,8,9]])
    b = a.transpose()
    print(b)

    输出：
    [[0 4 7 7]
     [1 5 8 8]
     [2 6 9 9]]

改变数组维数
reshape不改变原数组，resize改变原数组
    a = np.arange(10).reshape(2,5)
    a.reshape(2,5)
    print(a)
输出

    [[0 1]
     [2 3]
     [4 5]
     [6 7]
     [8 9]]

    a.resize(2,5)
    print(a)
输出

    [[0 1 2 3 4]
     [5 6 7 8 9]]

numpy.arange(start,end,step)
numpy.arange(1,12,2)
array([1,3,5,7,9,11])


numpy.eye() 生成对角矩阵
numpy.eye(N,M=None, k=0, dtype=<type 'float'>)

第一个参数：输出方阵（行数=列数）的规模，即行数或列数
第三个参数：默认情况下输出的是对角线全“1”，其余全“0”的方阵，如果k为正整数，则在右上方第k条对角线全“1”其余全“0”，k为负整数则在左下方第k条对角线全“1”其余全“0”。

np.eye(2, dtype=int)
array([[1, 0],
       [0, 1]])
np.eye(3, k=1)
array([[ 0.,  1.,  0.],
       [ 0.,  0.,  1.],


#文件IO
save()/load()  操作二进制文件 生成的文件后缀名为npy
import numpy as np
a = np.array([1,2,3,4,5])
np.save("outfile",a)

b = np.load('outfile.npy')
print(b)  #array([1, 2, 3, 4, 5])

savetxt()/loadtxt() 对简单文本进行操作
import numpy as np
a = np.array([1,2,3,4,5])
np.savetxt('out.txt',a)
b = np.loadtxt('out.txt')
print(b)  #[1. 2. 3. 4. 5.]

数学函数
加权平均
numpy.average(array,axis=0,weights,returned)
array为要计算的数组
axis表示计算的轴——1>>>按行计算  0>>>按列计算
weights权重，和array一一对应

ndarray.max([int axis])
函数功能：求ndarray中指定维度的最大值，默认求所有值的最大值。
axis=0:求各column的最大值
axis=1:求各row的最大值

np.where(condition,[ x, y])
x,y为满足和不满足条件时的输出
i = [[1,2,3],
     [4,5,6],
     [7,8,9]]
i = np.array(i)
a = np.arange(0,10,2)
print(np.where(i>=5))
(array([1, 1, 2, 2, 2], dtype=int32), #行索引
 array([1, 2, 0, 1, 2], dtype=int32))#列索引